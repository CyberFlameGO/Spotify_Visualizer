extends layout

block content
    - var spotifyLink = external_urls.spotify
    div(id='dashboard' class='align-items-center')
        div(id='user-profile')
            div(class='row d-flex justify-content-center m-5')
                h1 hello, #{display_name}_
            div(class='row d-flex justify-content-center')
                h6 A real time 3D audio visualizer made with WebGl and the Spotify Web API
            div(class='row d-flex justify-content-center m-2')
                h6 For best results, use an external speaker and microphone.
            div(class='row d-flex justify-content-around m-4')
                a(target='_blank' href=spotifyLink class='btn btn-info') open Spotify
            div(id='player-info' class='row d-flex justify-content-center m-4')
                div(class='playing my-3' id='dashboardTrackInfo')
            div(class='row d-flex justify-content-around')
                if product == "premium"
                    a(id='toVisualizer' class='btn btn-primary') open visualizer
                else
                    a(id='toVisualizer' class='btn btn-primary disabled') spotify premium users only

block visualizer-content
    div(id='main-visualizer')
        div(id='visualizer-controls')
            div(class='visualizer-controls-container')
                a(id='toDashboard' class='btn') Dashboard
                div(id='trackInfo' class='btn')
                a(class='btn' id='cameraRotate') Rotate
                a(class='btn' id='cameraZoom') Zoom
                a(class='btn' id='randomizeColour') Random Colour
                a(class='btn' id='randomizeMode') Random Mode
                div(class='mode-container')
                    - for(var i = 1; i < 9; i++)
                        - var modeID = 'mode_' + i;
                        a(id=modeID class='btn visualizerMode') #{i}
                div(id='shapeType' class='dropdown')
                    button(class='btn btn-primary dropdown-toggle' type='button' id='shapeDropdown' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false') Change Shape
                    div(class='dropdown-menu' aria-labelledby='dropdownMenuButton')
                        - for(var i = 0; i < 5; i++)
                            - var shapeType = 'changeShape(' + i + ')'
                            a(class='dropdown-item' onclick=shapeType) Shape #{i}

block script
    script(src='/js/ColourLayerChanger.js')
    script(src='/js/main.js')
    script(src='/js/KeyboardInput.js')
    script(await type='text/javascript').
        var access_token = "!{access_token}";
        var refresh_token = "!{refresh_token}";
        var spotifyLink = "!{external_urls}";
        var currentTrack, currentArtist, currentTrackID;

        window.onSpotifyWebPlaybackSDKReady = () => {
            const player = new Spotify.Player({
                name: 'Visualizer Player',
                getOAuthToken: cb => { cb(access_token); }
            });

            player.on('initialization_error', e => {console.error(e)});
            player.on('authentication_error', e => console.error(e));
            player.on('account_error', e => console.error(e));
            player.on('playback_error', e => console.error(e));

            player.on('ready', data => {
                console.log('Ready with Device ID', data.device_id);
                playRandomTrack(data.device_id);
            });

            player.on('player_state_changed', function (state) {
                trackCounter = state.position;
                isPaused = state.paused;

                if (trackCounter < 10) {
                    getPlayerTrack();
                    resetVariables();
                }
                trackEnd = state.duration;
            });

            player.connect();

        }

        function resetVariables() {
            g_section = 0;
            g_bar = 0;
            g_beat = 0;
            g_tatum = 0;
            g_segment = 0;
            cameraRandom = 2;
            spinr = 0;


            analyser.minDecibels = -90;
            analyser.maxDecibels = -25;
        }

        function sendTrackAnalytics(track, artist) {
            // For Track Event
            gtag('event', 'Started New Track', {
                'event_label': 'Playing: ' + track,
                'event_category': 'Track Details',
                'non_interaction': true
            });

            // For Artist Event
            gtag('event', 'Started New Artist', {
                'event_label': 'Playing: ' + artist,
                'event_category': 'Track Details',
                'non_interaction': true
            });
        }

        function sendTrackFeaturesAnalytics(features) {
            // For Track Event
            gtag('event', 'Valence', {
                'value': features.valence,
                'event_label': 'Valence: ' + features.valence,
                'event_category': 'Track Features',
                'non_interaction': true
            });
            gtag('event', 'Tempo', {
                'value': features.tempo,
                'event_label': 'Tempo: ' + features.tempo,
                'event_category': 'Track Features',
                'non_interaction': true
            });
            gtag('event', 'Energy', {
                'value': features.energy,
                'event_label': 'Energy: ' + features.energy,
                'event_category': 'Track Features',
                'non_interaction': true
            });
            gtag('event', 'Danceability', {
                'value': features.danceability,
                'event_label': 'Danceability: ' + features.danceability,
                'event_category': 'Track Features',
                'non_interaction': true
            });
            gtag('event', 'Time Signature', {
                'value': features.time_signature,
                'event_label': 'Time Signature: ' + features.time_signature,
                'event_category': 'Track Features',
                'non_interaction': true
            });
        }

        //MOVE THESE FUNCTIONS TO A SEPERATE FILE
        function getPlayerTrack() {
            $.ajax({
                url: 'https://api.spotify.com/v1/me/player',
                headers: {
                    'Authorization': 'Bearer ' + access_token
                },
                success: function (response) {
                    if(response) {
                        console.log("// TRACK INFO \\");
                        currentTrack = response.item.name;
                        currentArtist = response.item.artists[0].name;

                        document.getElementById('trackInfo').innerHTML = currentTrack + ' by ' + currentArtist;
                        document.getElementById('dashboardTrackInfo').innerHTML = currentTrack + ' by ' + currentArtist;

                        currentTrackID = response.item.id;
                        getFeatures(currentTrackID);
                        getAnalysis(currentTrackID);

                        sendTrackAnalytics(currentTrack, currentArtist);
                    }
                },
                error: function (error) {
                    if(error.status === 401) {
                        window.location.replace('/refreshToken');
                    }
                }
            });
        }

        function play(device_id, track) {
            $.ajax({
                url: `https://api.spotify.com/v1/me/player/play?device_id=${device_id}`,
                type: "PUT",
                data: JSON.stringify({uris: [track]}),
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + access_token
                }
            });
        }

        function playRandomTrack(device_id) {
            $.ajax({
                url: 'https://api.spotify.com/v1/me/top/tracks',
                headers: {
                    'Authorization': 'Bearer ' + access_token
                },
                success: function (response) {
                    play(device_id, response.items[Math.floor(Math.random() * 20)].uri);
                }
            });
        }

        function getFeatures(track) {
            $.ajax({
                url: `https://api.spotify.com/v1/audio-features/${track}`,
                headers: {
                    'Authorization': 'Bearer ' + access_token
                },
                success: function (response) {
                    console.log("// TRACK FEATURES \\");
                    console.log(response);
                    g_valence = response.valence;
                    g_energy = response.energy;
                    g_danceability = response.danceability;

                    beatZoom = 0.75 + g_danceability / 10;
                    if(randomizeMode) {
                        recentWireframe = new Array(Math.ceil(g_energy*10)).fill(0);
                    }

                    if (0.75 / response.energy < 0.94) {
                        analyser.smoothingTimeConstant = 0.75 / g_energy;
                    } else if (0.75 / response.danceability < 0.94) {
                        analyser.smoothingTimeConstant = 0.75 / g_danceability;
                    } else {
                        analyser.smoothingTimeConstant = 0.94;
                    }

                    zoomIntensity = 300 - response.tempo;
                    g_tempo = response.tempo;
                    g_time_signature = response.time_signature;

                    sendTrackFeaturesAnalytics(response);
                },
                error: function () {
                    setTimeout(getFeatures, 3000, track);
                }
            });
        }
        
        function getAnalysis(track) {
            $.ajax({
                url: `https://api.spotify.com/v1/audio-analysis/${track}`,
                headers: {
                    'Authorization': 'Bearer ' + access_token
                },
                success: function (response) {
                    console.log("// TRACK ANALYSIS \\");
                    console.log(response);
                    g_sections = response.sections;
                    g_bars = response.bars;
                    g_beats = response.beats;
                    g_tatums = response.tatums;
                    g_segments = response.segments;

                    /** Add beat Av and Var check to check beatConfidence  */

                    beatVar = 0;
                    beatAv = g_beats[0]["confidence"];
                    let d = 0;
                    for(let i = 1; i < g_beats.length; i++) {
                        d = g_beats[i]["confidence"] - beatAv;
                        beatAv += d / g_beats.length;
                        beatVar += d * (g_beats[i]["confidence"] - beatAv);
                    }

                    beatVar = beatVar / (g_beats.length - 1);
                    beatVar = beatVar * (1.8+g_valence);

                    console.log("beatAv = " + beatAv);
                    console.log("beatVar = " + beatVar);

                    console.log("//////////////////////////")

                    tatumVar = 0;
                    tatumAv = g_tatums[0]["confidence"];
                    d = 0;
                    for (let i = 1; i < g_tatums.length; i++) {
                        d = g_tatums[i]["confidence"] - tatumAv;
                        tatumAv += d / g_tatums.length;
                        tatumVar += d * (g_tatums[i]["confidence"] - tatumAv);
                    }

                    console.log("tatumAv = " + tatumAv);
                    tatumVar = tatumVar / (g_tatums.length - 1);
                    tatumVar = tatumVar * 2.2;
                    console.log("tatumVar = " + tatumVar);
                },
                error: function () {
                    setTimeout(getAnalysis, 3000, track);
                }
            });
        }


        /** Mode Controls */
        var modes = document.querySelectorAll('.visualizerMode');
        modes.forEach(function (elem) {
            elem.addEventListener('click', function (evt) {
                modeKey.key = parseInt(elem.innerHTML);

                // Analytics
                gtag('event', 'User Set Visualizer Mode', {
                    'value': elem.innerHTML,
                    'event_label': 'User Set Visualizer Mode (' +elem.innerHTML+')',
                    'event_category': 'Visualizer Controls'
                });
            });
        });

        document.getElementById('cameraRotate').addEventListener('click', function (ev) {
            toggleRotate = !toggleRotate;
            if (toggleRotate) {
                $('#cameraRotate').css({color: "#3AD36B"})
            } else {
                $('#cameraRotate').css({color: "#FFF"})
            }

            // Analytics
            gtag('event', 'User Set Camera Rotate', {
                'value': toggleRotate,
                'event_label': 'User Set Camera Rotate (' +toggleRotate+ ')',
                'event_category': 'Visualizer Controls'
            });
        });

        document.getElementById('cameraZoom').addEventListener('click', function (ev) {
            toggleZoom = !toggleZoom;
            if (toggleZoom) {
                $('#cameraZoom').css({color: "#3AD36B"})
            } else {
                $('#cameraZoom').css({color: "#FFF"})
            }

            // Analytics
            gtag('event', 'User Set Camera Zoom', {
                'value': toggleZoom,
                'event_label': 'User Set Camera Zoom (' +toggleZoom+ ')',
                'event_category': 'Visualizer Controls'
            });
        });

        document.getElementById('randomizeColour').addEventListener('click', function (ev) {
            randomizeColour = !randomizeColour;
            if (randomizeColour) {
                $('#randomizeColour').css({color: "#3AD36B"})
            } else {
                $('#randomizeColour').css({color: "#FFF"})
            }

            // Analytics
            gtag('event', 'User Set Randomize Colour', {
                'value': randomizeColour,
                'event_label': 'User Set Randomize Colour (' +randomizeColour+ ')',
                'event_category': 'Visualizer Controls'
            });
        });

        document.getElementById('randomizeMode').addEventListener('click', function (ev) {
            randomizeMode = !randomizeMode;
            if (randomizeMode) {
                $('#randomizeMode').css({color: "#3AD36B"})
            } else {
                $('#randomizeMode').css({color: "#FFF"})
            }

            // Analytics
            gtag('event', 'User Set Randomize Mode', {
                'value': randomizeMode,
                'event_label': 'User Set Randomize Mode (' +randomizeMode+ ')',
                'event_category': 'Visualizer Controls'
            });
        });

        document.getElementById('toVisualizer').addEventListener('click', function (ev) {
            $('#main-container').hide();
            $('#main-visualizer').show();

            // Analytics
            window.history.pushState("visualizer", "Visualizer", "/visualizer");
            gtag('config', 'UA-133459521-1', {
                'user_id': '#{display_name}',
                'page_title': 'Visualizer',
                'page_path': '/Visualizer'
            });
        });

        document.getElementById('toDashboard').addEventListener('click', function (ev) {
            $('#main-container').show();
            $('#main-visualizer').hide();

            // Analytics
            window.history.pushState("dashboard", "Dashboard", "/dashboard");
            gtag('config', 'UA-133459521-1', {
                'user_id': '#{display_name}',
                'page_title': 'Dashboard',
                'page_path': '/Dashboard'
            });
        });

        function isMobile() {
            var check = false;
            (function (a) {
                if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)))
                    check = true;
            })(navigator.userAgent || navigator.vendor || window.opera);
            return check;
        };

        if(isMobile()) {

            $('#visualizer-controls').css({display: "block", top: "1vh"});

        } else {

            $('#main-visualizer').on('mousemove', function (event) {
                if (200 - event.clientY < 0) {
                    $('#visualizer-controls').css({display: "block", top: 200 - event.clientY});
                } else {
                    $('#visualizer-controls').css({display: "block", top: 0});
                }
            }).on('mouseout', function () {
                $('#visualizer-controls').css({display: "none"});
            });

        }


